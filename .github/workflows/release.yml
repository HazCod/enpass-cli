name: release

on:
  push:
    branches: [master]

jobs:

  goreleaser:
    name: Release
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        uses: go-semantic-release/action@v1
        id: semantic
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      -
        run: git clean -fdx
      -
        name: Set up Git
        if: steps.semantic.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
      -
        name: Update tags
        if: steps.semantic.outputs.version != ''
        run: |
          TAG=v${{ steps.semantic.outputs.version }}
          git push origin :refs/tags/${TAG}
          git tag -fa ${TAG} -m "release v${{ steps.semantic.outputs.version }}"
          git push origin ${TAG}
      -
        id: vars
        run: |
          echo ::set-output name=go_version::$(grep '^FROM go' .github/go/Dockerfile | cut -d ' ' -f 2 | cut -d ':' -f 2)
          echo "Using Go version ${{ steps.vars.outputs.go_version }}"
      -
        name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.vars.outputs.go_version }}
      -
        name: install gcc
        run: sudo apt-get install gcc-multilib g++-multilib
      -
        name: Release
        uses: goreleaser/goreleaser-action@v2.4.1
        with:
          args: release --config=.github/goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
